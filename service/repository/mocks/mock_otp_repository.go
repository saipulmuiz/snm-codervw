// Code generated by MockGen. DO NOT EDIT.
// Source: codepair-sinarmas/service (interfaces: OtpRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "codepair-sinarmas/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOtpRepository is a mock of OtpRepository interface.
type MockOtpRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOtpRepositoryMockRecorder
}

// MockOtpRepositoryMockRecorder is the mock recorder for MockOtpRepository.
type MockOtpRepositoryMockRecorder struct {
	mock *MockOtpRepository
}

// NewMockOtpRepository creates a new mock instance.
func NewMockOtpRepository(ctrl *gomock.Controller) *MockOtpRepository {
	mock := &MockOtpRepository{ctrl: ctrl}
	mock.recorder = &MockOtpRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOtpRepository) EXPECT() *MockOtpRepositoryMockRecorder {
	return m.recorder
}

// GetOtpByUserID mocks base method.
func (m *MockOtpRepository) GetOtpByUserID(arg0 int64) (*models.OTPLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOtpByUserID", arg0)
	ret0, _ := ret[0].(*models.OTPLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOtpByUserID indicates an expected call of GetOtpByUserID.
func (mr *MockOtpRepositoryMockRecorder) GetOtpByUserID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOtpByUserID", reflect.TypeOf((*MockOtpRepository)(nil).GetOtpByUserID), arg0)
}

// GetOtpByUserIDAndCode mocks base method.
func (m *MockOtpRepository) GetOtpByUserIDAndCode(arg0 int64, arg1 string) (*models.OTPLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOtpByUserIDAndCode", arg0, arg1)
	ret0, _ := ret[0].(*models.OTPLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOtpByUserIDAndCode indicates an expected call of GetOtpByUserIDAndCode.
func (mr *MockOtpRepositoryMockRecorder) GetOtpByUserIDAndCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOtpByUserIDAndCode", reflect.TypeOf((*MockOtpRepository)(nil).GetOtpByUserIDAndCode), arg0, arg1)
}

// SaveOTP mocks base method.
func (m *MockOtpRepository) SaveOTP(arg0 *models.OTPLog) (*models.OTPLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOTP", arg0)
	ret0, _ := ret[0].(*models.OTPLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveOTP indicates an expected call of SaveOTP.
func (mr *MockOtpRepositoryMockRecorder) SaveOTP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOTP", reflect.TypeOf((*MockOtpRepository)(nil).SaveOTP), arg0)
}

// UpdateStatusOtpByUserIDAndCode mocks base method.
func (m *MockOtpRepository) UpdateStatusOtpByUserIDAndCode(arg0 int64, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusOtpByUserIDAndCode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatusOtpByUserIDAndCode indicates an expected call of UpdateStatusOtpByUserIDAndCode.
func (mr *MockOtpRepositoryMockRecorder) UpdateStatusOtpByUserIDAndCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusOtpByUserIDAndCode", reflect.TypeOf((*MockOtpRepository)(nil).UpdateStatusOtpByUserIDAndCode), arg0, arg1)
}
